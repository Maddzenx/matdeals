name: Scrape Willys Products

on:
  schedule:
    - cron: '0 4 * * 1'  # Run every Monday at 4 AM
  workflow_dispatch:  # Allow manual triggering

jobs:
  scrape:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd scripts
          npm install

      - name: Run scraping script
        id: scrape
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          cd scripts
          if ! node scrape-willys.js; then
            echo "scrape_failed=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "scrape_failed=false" >> $GITHUB_OUTPUT

      - name: Check if products were updated
        id: check
        if: steps.scrape.outputs.scrape_failed == 'false'
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          cd scripts
          if ! node check-prices.js; then
            echo "check_failed=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "check_failed=false" >> $GITHUB_OUTPUT

      - name: Debug outputs
        if: always()
        run: |
          echo "Scrape status: ${{ steps.scrape.outputs.scrape_failed }}"
          echo "Check status: ${{ steps.check.outputs.check_failed }}"

      - name: Create issue for results
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const date = new Date().toISOString().split('T')[0];
              const scrapeFailed = '${{ steps.scrape.outputs.scrape_failed }}' === 'true';
              const checkFailed = '${{ steps.check.outputs.check_failed }}' === 'true';
              
              console.log('Scrape failed:', scrapeFailed);
              console.log('Check failed:', checkFailed);
              
              const status = scrapeFailed ? '❌ Failed' : '✅ Success';
              const checkStatus = checkFailed ? '❌ Failed' : '✅ Success';
              
              const issueTitle = `Scraping Results - ${date}`;
              const issueBody = [
                `# Scraping Results for ${date}`,
                '',
                '## Status',
                `- Scraping: ${status}`,
                `- Price Check: ${checkStatus}`,
                '',
                '## Workflow Details',
                `- Run ID: ${context.runId}`,
                `- Triggered by: ${context.eventName}`,
                `- Commit: ${context.sha}`,
                '',
                '## Next Steps',
                status === '❌ Failed' ? 'Please check the workflow logs for error details.' : 'Products have been successfully updated.'
              ].join('\n');

              const response = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['scraping', status === '❌ Failed' ? 'failed' : 'success']
              });
              
              console.log('Issue created:', response.data.html_url);
            } catch (error) {
              console.error('Error creating issue:', error);
              throw error;
            } 